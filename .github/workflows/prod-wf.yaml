############ BUILD ARTIFACT JOB ####################
name: Build and Deploy to Prod

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select deployment environment'
        required: true
        type: choice
        options:
          - Prod
jobs:
  build:
    name: Build Python Package
    runs-on: [macOS, X64]
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set Up Python Environment
        run: |
          python3 -m venv venv
          venv/bin/python -m pip install --upgrade pip
          venv/bin/pip install -r requirements.txt --no-cache-dir

      - name: Ensure Clean Build
        run: rm -rf dist build *.egg-info

      - name: Ensure dist directory exists
        run: mkdir -p dist

      - name: Build Python Package
        run: |
          venv/bin/python -m pip install --upgrade setuptools wheel
          venv/bin/python setup.py sdist bdist_wheel
          ls -lah dist/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package-${{ github.run_id }}
          path: dist/
######## UNIT TEST JOB ###############################
  test:
    name: Run Unit Tests
    runs-on: [macOS, X64]
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python Environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run Unit Tests
        run: |
          cd ${{ github.workspace }}
          venv/bin/python -m pytest tests/ --disable-warnings
##### STATIC ANALYSIS ##################################
  sonarqube:
    name: SonarQube & Trivy Scan
    runs-on: [macOS, X64]
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run SonarQube Scan
        run: sonar-scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Make Trivy Script Executable
        run: chmod +x trivy-full-scan.sh

      - name: Run Trivy Full Scan
        run: ./trivy-full-scan.sh

      - name: Upload Trivy Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-scan-results.txt
########## PACKAGE AND PUSH ARTIFACT ################################
  package-and-publish:
    name: Publish to PyPI
    runs-on: [macOS, X64]
    needs: sonarqube
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python Environment for Packaging
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Clean Dist Directory
        run: rm -rf dist

      - name: Build Package
        run: |
          source venv/bin/activate
          python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          source venv/bin/activate
          twine upload dist/*
######## CONTANARIZED IMAGE AND PUSH TO DOCKER HUB ##################
  build-and-deploy-Docker-Hub:
    name: Build and Deploy Docker Image
    runs-on: ubuntu-latest
    needs: package-and-publish
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t betrand1997/my-static-websites .

      - name: Push Docker Image to Docker Hub
        run: docker push betrand1997/my-static-websites

########### PULL AND RUN IMAGE ######################
  deploy-container:
   name: Run Image
   runs-on: self-hosted
   needs: build-and-deploy-Docker-Hub
   steps:
    - name: Stop and Remove Existing Container (if exists)
      run: |
        docker ps -a -q --filter "name=my-static-websites-container" | grep -q . && \
        docker stop my-static-websites-container && docker rm my-static-websites-container || echo "No existing container to remove"

    - name: Check if Port 5050 is in Use and Kill Process
      run: |
        sudo lsof -i :5050 && sudo fuser -k 5050/tcp || echo "Port 5050 is free"

    - name: Pull Latest Docker Image
      run: docker pull betrand1997/my-static-websites
    - name: Run New Container with Env Secrets and Restart Policy
      run: |
        docker run -d \
          --name my-static-websites-container \
          --restart unless-stopped \
          -p 5050:50 \
          -e MONGO_URI="${{ secrets.MONGO_URI }}" \
          -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
          -e EMAIL_USER="${{ secrets.EMAIL_USER }}" \
          -e EMAIL_PASS="${{ secrets.EMAIL_PASS }}" \
          -e SMTP_SERVER="${{ secrets.SMTP_SERVER }}" \
          -e SMTP_PORT="${{ secrets.SMTP_PORT }}" \
          -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -e AWS_REGION="${{ secrets.AWS_REGION }}" \
          -e MONGO_USERNAME="${{ secrets.MONGO_USERNAME }}" \
          -e MONGO_PASSWORD="${{ secrets.MONGO_PASSWORD }}" \
          betrand1997/my-static-websites

   

   


############# PULL IMAGE AND DEPLOY TO KUBERNETES CLUSTER ###########################
  deploy:
    name: Deploy to Kubernetes on EC2
    runs-on: [self-hosted, Linux, X64]

    steps:
      - name: Run checkout in container (Amazon Linux 2023)
        uses: addnab/docker-run-action@v3
        with:
          image: amazonlinux:2023
          options: -v ${{ github.workspace }}:/workspace
          run: |
            yum install -y git tar gzip
            cd /workspace
            git config --global --add safe.directory /workspace
            git init
            git remote add origin https://github.com/${{ github.repository }}.git
            git fetch --all
            git checkout ${{ github.sha }}

      - name: Debug - List repo structure
        run: ls -la ${{ github.workspace }}

      - name: Debug - List kubernetes folder
        run: ls -la ${{ github.workspace }}/kubernetes

      - name: Apply Kubernetes Manifests
        run: |
          kubectl get namespace dev || kubectl create namespace dev
          kubectl apply -f ${{ github.workspace }}/kubernetes/dev-deployment.yaml -n dev
          kubectl apply -f ${{ github.workspace }}/kubernetes/dev-service.yaml -n dev
          kubectl rollout status deployment/my-app -n dev
  #