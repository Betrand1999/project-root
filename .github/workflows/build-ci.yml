name: Build, Test, and Upload Python Package Artifact

on:
  push:
    branches:
      - main  

jobs:
  build:
    name: Build Python Package
    runs-on: self-hosted # Change this if needed (e.g., ubuntu-latest)
    environment: prod

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python Environment
        run: |
          python3 -m venv venv
          venv/bin/python -m pip install --upgrade pip
          venv/bin/pip install -r requirements.txt --no-cache-dir

      - name: Ensure Clean Build
        run: |
          rm -rf dist build *.egg-info

      - name: Ensure dist directory exists
        run: mkdir -p dist

      - name: Build Python Package
        run: |
          venv/bin/python -m pip install --upgrade setuptools wheel
          venv/bin/python setup.py sdist bdist_wheel
          ls -lah dist/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package-${{ github.run_id }}
          path: dist/

  # Run Unit Test With Pytest
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest # or self-hosted if you prefer
    needs: build # Ensures this job runs after the build job

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package-${{ github.run_id }}
          path: dist/

      - name: Set Up Python Environment
        run: |
          python3 -m venv venv
          venv/bin/python -m pip install --upgrade pip
          venv/bin/pip install -r requirements.txt --no-cache-dir
          venv/bin/pip install pytest

      - name: Run Unit Tests
        run: |
          venv/bin/python -m pytest tests/ --disable-warnings

  ############################################################
  sonarqube:
    name: SonarQube Scan
    runs-on: [self-hosted]
    #timeout-minutes: 3
    needs: test
    environment: prod
    if: false

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  ################### Publish to PyPI ################
  package-and-publish:
    name: Publish to PyPI
    runs-on: [self-hosted]
    # needs: sonarqube
    environment: prod

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python Environment for Packaging
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Clean Dist Directory
        run: rm -rf dist

      - name: Build Package
        run: |
          source venv/bin/activate
          python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          source venv/bin/activate
          twine upload dist/*

  ################### Build and Deploy Docker Image ################
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test # Ensures tests pass before building the Docker image
    container:
      image: alpine:latest # Use Alpine as the base image
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker in Alpine
        run: |
          apk update && apk add --no-cache docker

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t betrand1997/my-static-websites .

      - name: Push Docker image to Docker Hub
        run: |
          docker push betrand1997/my-static-websites
