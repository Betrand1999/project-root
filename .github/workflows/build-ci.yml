name: Build and Deploy Docker Image

on:
  push:
    branches:
      - dev  # Trigger this workflow on pushes to the 'dev' branch
  workflow_dispatch:  # Manually trigger the workflow

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Use the GitHub-hosted runner to run the actions

    container:
      image: alpine:latest  # python:3.10-slim  # Use a Python image or any other environment you need

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install docker.io
          sudo systemctl enable docker
          sudo systemctl start docker

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-cloud-devops-consulting:latest -f Dockerfile .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-cloud-devops-consulting:latest

  approval:
    runs-on: ubuntu-latest
    needs: build-and-deploy  # This job will only run after the build-and-deploy job
    if: ${{ github.event_name == 'workflow_dispatch' }}  # This ensures that it only runs when triggered manually
    steps:
      - name: Await Approval
        run: |
          echo "Waiting for approval..."
        # Optional: You could use a manual approval action here

  # deploy-to-eks:
  #   runs-on: ubuntu-latest
  #   needs: approval  # This job will only run after the approval job
  #   if: ${{ github.event_name == 'workflow_dispatch' }}  # Triggered manually
  #   steps:
  #     - name: Set up kubectl for EKS
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-west-2  # Replace with your EKS region

  #     - name: Deploy Docker image to EKS
  #       run: |
  #         kubectl set image deployment/my-deployment my-app=${{ secrets.DOCKER_USERNAME }}/my-cloud-devops-consulting:latest
  #         kubectl rollout status deployment/my-deployment
