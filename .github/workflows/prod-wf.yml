name: Build and Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select deployment environment'
        required: true
        default: prod
        type: choice
        options:
          - prod

jobs:
  build:
    name: Build Python Package
    runs-on: self-hosted
    environment: ${{ github.event.inputs.environment }}  # Approval required only for this job

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python Environment
        run: |
          python3 -m venv venv
          venv/bin/python -m pip install --upgrade pip
          venv/bin/pip install -r requirements.txt --no-cache-dir

      - name: Ensure Clean Build
        run: rm -rf dist build *.egg-info

      - name: Ensure dist directory exists
        run: mkdir -p dist

      - name: Build Python Package
        run: |
          venv/bin/python -m pip install --upgrade setuptools wheel
          venv/bin/python setup.py sdist bdist_wheel
          ls -lah dist/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package-${{ github.run_id }}
          path: dist/

  test:
    name: Run Unit Tests
    runs-on: self-hosted
    needs: build  # Runs automatically after build is approved (No manual approval)

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python Environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run Unit Tests
        run: venv/bin/python -m pytest tests/ --disable-warnings

  sonarqube:
    name: SonarQube Scan
    runs-on: self-hosted
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  package-and-publish:
    name: Publish to PyPI
    runs-on: self-hosted
    needs: sonarqube
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python Environment for Packaging
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Clean Dist Directory
        run: rm -rf dist

      - name: Build Package
        run: |
          source venv/bin/activate
          python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          source venv/bin/activate
          twine upload dist/*

  build-and-deploy:
    name: Build and Deploy Docker Image
    runs-on: ubuntu-latest
    needs: package-and-publish
    container:
      image: alpine:latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Docker in Alpine
        run: apk update && apk add --no-cache docker

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t betrand1997/my-static-websites .

      - name: Push Docker Image to Docker Hub
        run: docker push betrand1997/my-static-websites

  deploy-to-k8s:
    name: Deploy to Kubernetes
    runs-on: self-hosted
    needs: build-and-deploy  # Should run automatically without approval

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Verify kubectl Installation
        run: kubectl version --client

      - name: Apply Kubernetes Namespace
        run: kubectl apply -f kubernetes/namespace.yaml

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f kubernetes/deployment.yaml -n ${{ github.event.inputs.environment }}
          kubectl apply -f kubernetes/service.yaml -n ${{ github.event.inputs.environment }}

      - name: Wait for Deployment to be Ready
        run: kubectl rollout status deployment/my-app -n ${{ github.event.inputs.environment }}

      - name: Verify Deployment
        run: kubectl get pods -n ${{ github.event.inputs.environment }} -o wide

      - name: Stop and Remove Existing Container (if exists)
        run: |
          docker ps -a -q --filter "name=my-static-websites-container" | grep -q . && \
          docker stop my-static-websites-container && docker rm my-static-websites-container || echo "No existing container to remove"

      - name: Check if Port 8080 is in Use and Kill Process
        run: |
          sudo lsof -i :8080 && sudo fuser -k 8080/tcp || echo "Port 8080 is free"

      - name: Pull Latest Docker Image
        run: docker pull betrand1997/my-static-websites

      - name: Run New Container
        run: |
          docker run -d -p 8080:80 --name my-static-websites-container --restart unless-stopped betrand1997/my-static-websites
